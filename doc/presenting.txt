*presenting.vim* *presenting.vim.txt* *presenting.txt* *presenting*
A simple tool for presenting slides in Vim based on text files.
>
                                    o                     o
    _   ,_    _   ,   _   _  _  _|_     _  _    __,           _  _  _
  |/ \_/  |  |/  / \_|/  / |/ |  |  |  / |/ |  /  |  |  |_|  / |/ |/ |
  |__/    |_/|__/ \/ |__/  |  |_/|_/|_/  |  |_/\_/|/o \/  |_/  |  |  |_/
 /|                                              /|
 \|                                              \|
<

Version: 0.1.0

==============================================================================
CONTENTS                                                   *presenting-contents*

  1. Introduction..........................|presenting_introduction|
  2. Usage.................................|presenting-usage|
  3. Mappings..............................|presenting-mappings|
  4. Configuration.........................|presenting-configuration|
  5. Issues................................|presenting-issues|
  6. License...............................|presenting-license|

==============================================================================
INTRODUCTION                                           *presenting-introduction*

presenting.vim is a simple tool for presenting slides in Vim based on text files.
It is a clone of https://github.com/pct/present.vim
which is a clone of https://github.com/sorah/presen.vim

In contrast to its predecessors presenting.vim has support for a number of
markup languages, can be extended, and is documented. Great, hey?

==============================================================================
USAGE                                                         *presenting-usage*

You write you presentation in your favorite markup language.
Every slide is separated by a markup language specific marker:
>
 FILETYPE       |  SLIDE SEPARATOR
 ---------------+-----------------
 markdown       |  # heading
 rst            |  ~~~~
 orgmode        |  #----
 GoLang slide   |  * heading
<

When you want to start presenting, execute: >
  :PresentingStart
<
It is possible to have multiple presentations running at the same time. Just
run the command in each source document, and each slide show will be
displayed in its own tab.

You can navigate to the next slide (n), the previous slide (p) or quit (q)
the presentation.

Also, take a look at the presenting.vim examples:
 * PresentingExample.markdown
 * PresentingExample.rst
 * PresentingExample.org
 * PresentingExample.slide

------------------------------------------------------------------------------
INLINE CODE BLOCKS~

You can use the syntax highlighting for inline code blocks of your preferred
markup language.

RST supports python by default:
>
  .. code:: python
      def main():
          return False
<

==============================================================================
MAPPINGS                                                   *presenting-mappings*

In the presentation mode there are the following mappings:

  q - quit presentation
  n - next slide
  p - previous slide

These can be overridden, as shown in the following examples: >
  :let g:presenting_quit = '<Esc>'
  :let g:presenting_next = '<Space>'
  :let g:presenting_prev = '<Left>'
<
==============================================================================
CONFIGURATION                                         *presenting-configuration*

                                                   *presenting_slide_separators*
This option overrides the default regular expression that specifies the slide
separators, or defines a separator for filetypes not supported by default.

Customize a supported filetype: >
  au FileType rst let b:presenting_slide_separator = '\v(^|\n)\~{4,}'
<
Add your own filetype: >
  au FileType my_filetype let b:presenting_slide_separator = '----'
<
  where '----' is the separator.

------------------------------------------------------------------------------
                                                         *presenting_statusline*
This option allows you to customize the format of the statusline for the
presentation buffer. See |statusline| for available fields.

The following variables are available for use in this option:

variable                         meaning~
`b:presenting_page_current`        The current page number (starting from 1)
`b:presenting_page_total`          Total number of pages in the slide

Default: >
  :let g:presenting_statusline =
    \ '%{b:presenting_page_current}/%{b:presenting_page_total}'
<
Set the statusline to display cursor position: >
  :let g:presenting_statusline = '%l, %c'
<
------------------------------------------------------------------------------
                                                         *presenting_top_margin*
This option lets you define the number of blank lines to insert above each
slide. Default: 0
>
  :let g:presenting_top_margin = 2
<
------------------------------------------------------------------------------
                *presenting_figlets* *presenting_font_large* *presenting_font_small*

Note: Currently, this applies only to Markdown files.

Headings can be rendered by using the figlets program if it is installed. This
is on by default, and can be turned off by setting >
  :let g:presenting_figlets = 0
>
The default figlet font for`#`headings is "standard", and for`##`and`###`
headings,is "small", shown here:  >
       _                  _               _
   ___| |_ __ _ _ __   __| | __ _ _ __ __| |                    _ _
  / __| __/ _` | '_ \ / _` |/ _` | '__/ _` |      ____ __  __ _| | |
  \__ \ || (_| | | | | (_| | (_| | | | (_| |     (_-< '  \/ _` | | |
  |___/\__\__,_|_| |_|\__,_|\__,_|_|  \__,_|     /__/_|_|_\__,_|_|_|
<

These fonts can be changed with the the following variables: >
  :let g:presenting_font_large = 'big'
  :let g:presenting_font_small = 'mini'
<
More information about figlets can be found at https://figlet.org and the
interactive website http://patorjk.com/software/taag can be used to test out
the different fonts.
------------------------------------------------------------------------------
                                                         *presenting_image2ascii*

Note: Currently, this applies only to Markdown files.

Markdown image embeddings can also been rendered into ascii by a tool called
image2ascii. This is on by default, and can be turned off by setting >
  :let g:presenting_image2ascii = 0
>

You can append size paremeters (ratio or width and height) in http query
paremeters style after the URL of the graphic file to resize it. : >
  ![alt text](./image.png?r=0.4)
  ![alt text](./image.png?w=55&h=35)
>

More information about image2ascii can be found at
https://github.com/qeesung/image2ascii
==============================================================================
ISSUES                                                       *presenting-issues*

Having issues?
 * goto https://github.com/sotte/presenting.vim/issues
 * or, better, goto |presentingcontribute|

Wanna contribute?                                         *presentingcontribute*
 * https://github.com/sotte/presenting.vim

presenting.vim only uses vim-script.

==============================================================================
LICENSE                                                     *presenting-license*

presenting.vim is under the BEER-WARE LICENSE.

THE BEER-WARE LICENSE

"As long as you retain this notice you can do whatever you want with this
stuff. If we meet some day, and you think this stuff is worth it, you can buy
me a beer in return."

==============================================================================
vim:tw=78:ts=2:sw=2:expandtab:ft=help:norl:cole=0
